
buildscript {
    repositories {
         jcenter() //this works with Gradle 1.7
         // maven { url 'http://jcenter.bintray.com' } this works with Gradle 1.6
    }
    dependencies {
        classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '2.2.4')
    }
}


/*def globalVersion = new Version(currentVersion)*/

apply plugin: 'java'
//apply plugin: 'maven'

apply plugin: 'maven-publish'
apply plugin: 'artifactory-publish'

sourceCompatibility = 1.7
version = '1.0'

/*
repositories {
    mavenCentral()
}
*/

dependencies {
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
    testCompile group: 'junit', name: 'junit', version: '4.+'
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart', 'Implementation-Version': version
    }
}

task sourceJar(type: Jar) {
      from sourceSets.main.allSource
      classifier = 'sources'
}
task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

configurations {
  published
}

// Add the sourceJars to non-extractor modules
artifacts {
  published sourceJar
  published javadocJar
}


/******Regular Maven plugin******
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "http://localhost:8080/artifactory/simple/libs-release-local/"){
				authentication(userName: "admin", password: "password")
			}
			pom.groupId='org.gradle'
			pom.artifactId='Person'
			pom.version='2.0'
        }
    }
}
*/


/***********************Maven-publish plugin*****************************/
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			
			groupId 'org.gradle'
			artifactId 'Person'
			version '3.0'
				
			/*artifacts {
			  published sourceJar
			  published javadocJar
			}*/		
		}
	}
	
	repositories {
		maven {
			url	"http://localhost:8080/artifactory/simple/libs-release-local/"
			credentials {
				username 'admin'
				password 'password'
			}	
		}
	}
}

artifactoryPublish {
        publications(publishing.publications.mavenJava)
}


artifactory {
    publish {
        contextUrl = artifactory_contextUrl //The Artifactory server URL, property taken from gradle.properties
        repository {
            repoKey = 'libs-release-local' //The Artifactory repository key to publish to
            username = artifactory_user //The publisher user name, property taken from gradle.properties
            password = artifactory_password //The publisher password, property taken from gradle.properties
            ivy {
                //Optional section for configuring Ivy publication (when publishIvy = true). Assumes Maven repo layout if If not specified
                ivyLayout = '[organization]/[module]/ivy-[revision].xml'
                artifactLayout = '[organization]/[module]/[revision]/[module]-[revision](-[classifier]).[ext]'
                mavenCompatible = false
                //Convert any dots in an [organization] layout value to path separators, similar to Maven's groupId-to-path conversion. True if not specified
            }
        }
        defaults {
            //publishIvy & publishPom are true by default
            publishArtifacts = true
            publications('mavenJava')
            properties = ['build.status': "$it.project.status".toString()]
           // publishPom = false //Publish generated POM files to Artifactory (true by default)
           // publishIvy = true //Publish generated Ivy descriptor files to Artifactory (true by default)
        }
    }
    resolve {
        contextUrl = artifactory_contextUrl
        repository {
            repoKey = 'remote-repos' //The Artifactory (preferably virtual) repository key to resolve from
            username = artifactory_user
            //Optional resolver user name (leave out to use anonymous resolution), property taken from gradle.properties
            password = artifactory_password //The resolver password, property taken from gradle.properties

        }
    }
}







